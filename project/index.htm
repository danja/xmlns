<html>
  <head>
    <title>Project Vocabulary Specification</title>
    <link 
media="screen" href="spec-rec.css" 
type="text/css" rel="stylesheet" />
<link rel="meta" title="DOAP" type="application/rdf+xml" href="doap.rdf" />
  </head>
  
<body bgcolor="#FFFFFF">
<h1 align="center"> Project Vocabulary </h1>
    
<p align="left"><b><i>Update 2004-12-26</i></b> - working with <a href="http://www.bnode.org/en-semweblog">Benjamin 
  Nowack</a> on creating a merged set of terms, incorporating his <a href="http://labs.semanticweb.org/main-vocab_browser?vocab=pm&vocab_id=6">Project 
  Management</a> vocabulary</p>
<p align="left"><b><i>Update 2004-07-24</i></b> - added <a href="http://mouettes.balbinus.net/doap-viewer.php?url=http%3A%2F%2Fideagraph.net%2Fxmlns%2Fproject%2Fdoap.rdf">DOAP</a> 
  profile (see <a href="http://usefulinc.com/doap">Description of a Project</a>)</p>
<p align="left"><b><i>Update 2004-05-07</i></b> - looks like I'm going to be needing 
  this myself, so am in the process of revising - <a href="project.owl">latest 
  schema</a></p>
<h2 align="left">Overview<a name="overview"></a></h2>
<p align="left">This document specifies a vocabulary for describing projects independently 
  of the project domain (e.g. software product development, fundraising, painting 
  the garage). The intended architecture is primarily goal-oriented, that a project 
  will consist of goals which may be broken down into subgoals and may be satisfied 
  by completing a set of associated tasks. The vocabulary is constructed using 
  the Resource Description Framework (RDF) and the Web Ontology Language (OWL). 
  It may be used in conjunction with other RDF vocabularies such as FOAF or as 
  an RSS 1.0 module. The <a href="project.owl">schema</a> is provided in RDF/XML 
  (other syntaxes to follow). Its ontological definition is in the OWL DL sublanguage. 
</p>
<p align="left">This is a work-in-progress, a practical application is being developed 
  for evaluation of the vocabulary.</p>
<p align="left"> Please <a href="http://dannyayers.com/ideagraph-blog/archives/000783.html"> 
  post comments here</a> or <a href="mailto:danny666@virgilio.it">mail me</a>. 
</p>
<p align="left"> <a href="project.owl">OWL Ontology</a> - should be usable now, 
  most terms are relatively stable though additional constraints (corresponding 
  to the prose description below) are likely to be added.</p>
<p align="left"><i>text blocks in italics have just been copy &amp; pasted from 
  elsewhere, here for temporary reference while figuring out the definitions</i></p>
<h2 align="left">Contents </h2>
<ul>
  <li><a href="#termlist">List of Terms</a></li>
  <li><a href="#intro">Introduction</a></li>
  <li><a href="#spec">Specification</a></li>
  <li><a href="#namespace">Namespace</a></li>
  <li><a href="#classes">Classes</a></li>
  <li><a href="#properties">Properties</a></li>
  <li><a href="#compatibility">Compatibility Notes</a></li>
  <li><a href="#schema">RDF Schema</a></li>
  <li><a href="#refs">References</a></li>
  <li><a href="#changes">Changes</a></li>
</ul>
<p align="left">&nbsp;</p>
    <p align="left">Project management and issue tracking</p>
<p align="left">A Project Management System </p>
<h2 align="left">List of Terms<a name="termlist"></a></h2>
<h3 align="left">Classes </h3>
<p align="left"><a href="#Goal">Goal<br>
  </a><a href="#softgoal">SoftGoal</a></p>
<p align="left"><a href="#goallist">GoalList</a><a href="#softgoal"><br>
  </a><a href="#Module">Module<br>
  </a><a href="#Task"> Task<br>
  </a><a href="#TaskList">TaskList<br>
  </a><a href="#Project">Project<br>
  </a><a href="#Agent"> Agent<br>
  </a><a href="#Session">Session</a><br>
  <a href="#environment">Environment</a> </p>
<h3 align="left"> Properties </h3>
<p align="left"> <a href="#name">name </a> <br>
  <a href="#goalType">logo </a> <br>
  <a href="#goalType">goalType<br>
  </a><a href="#version">version<br>
  </a><a href="#hasGoal"> hasGoal<br>
  </a><a href="#taskType">taskType<br>
  </a><a href="#priority">priority<br>
  </a><a href="#status"> status</a><br>
  <a href="#duration">duration</a><br>
  <a href="#submittedDate"> submittedDate<br>
  </a><a href="#startDate">startDate<br>
  </a><a href="#targetDate"> targetDate<br>
  </a><a href="#finishDate">finishDate<br>
  </a><a href="#dependsOn"> dependsOn<br>
  </a><a href="#isDependentOf">isDependentOf<br>
  </a><a href="#isHelpedBy"> isHelpedBy<br>
  </a><a href="#helps">helps</a></p>
<p align="left"><a href="#hasTask">hasTask</a></p>
<p align="left"><a href="#subGoal">subGoal</a></p>
<p align="left"><a href="#subTask">subTask</a></p>
<p align="left"><a href="#helps"><br>
  </a> <a href="#isHurtBy">isHurtBy</a></p>
<p align="left"><a href="#hurts">hurts</a></p>
<p align="left"> <a href="#hasAgent">hasAgent<br>
  </a><a href="#owner"> owns<br>
  </a><a href="#reporter">reporter<br>
  </a><a href="#agentType">agentType<br>
  </a><a href="#role"> role</a><br>
  <a href="#hasReport">hasReport</a></p>
<p align="left"><a href="#availability">hasAvailability</a></p>
<p align="left">&nbsp;</p>
<h2 align="left">Introduction<a name="intro"></a></h2>
<p align="left"> The PRJ Project Vocabulary is intended for use with RDF tools 
  for describing projects. The terms have been chosen such that they are general 
  enough to represent elements of virtually any project. Projects are described 
  as instances of RDF graphs.</p>
<h3 align="left">Goal-Orientation</h3>
<p align="left">The project vocabulary is primarily goal-oriented: a project will 
  be described as a set of goals which correspond to elements of the project. 
  These goals identify the purpose of each element, the way in which each goal 
  is to be achieved will be described in terms of tasks. Individual goals and 
  tasks may be broken into subgoals and subtasks, and each of these will be represented 
  by a node (instance of a class) within the graph. The relationships between 
  the goals and tasks will be represented by arcs (properties) between the nodes.</p>
<p align="left">Each goal or task may be be further described using other terms 
  from the vocabulary. The vocabulary lends itself to a methodology involving 
  hierarchical decomposition, though it should be noted that the model supports 
  interdependencies that fall outside of a strict hierarchy (the model is a graph, 
  not a tree). </p>
<p align="left">Within the hierarchical view, completion of the project as a whole 
  can be seen as the root goal.</p>
<h3 align="left">Hard and Soft, Goals and Dependencies</h3>
<p align="left">The goals described by this vocabulary may either be 'hard' in 
  the sense that it is can easily be stated whether or not the goal has been achieved, 
  or 'soft' where such a call is difficult or impossible to make (if the project 
  was to climb a mountain, then a soft goal might be to do it <i>safely</i>). 
  Soft goals are often things that can be measured (e.g. number of climbing injuries). 
  Within the vocabulary a goal will be considered 'hard' if it is represented 
  by an instance of the <a href="#Goal">Goal</a> class, rather than explicitly 
  represented by an instance of the <a href="#softgoal">SoftGoal</a> class. </p>
<p align="left">Similarly there are two sets of properties that correspond to 
  hard and soft dependencies : <a href="#dependsOn">dependsOn</a>/<a href="#isADependencyOf">isADependencyOf</a> 
  are used where the relationship is 'hard', in other words a well-defined dependency 
  - if <code>A dependsOn B</code> then it is impossible to achieve A without first 
  achieving B. The 'soft' dependency relationships are represented using <a href="#helps">helps</a>/<a href="#isHelpedBy">isHelpedBy 
  </a> and <a href="#hurts">hurts</a>/<a href="#isHurtBy">isHurtBy</a>. These 
  terms are loosely defined, and whereas it may be possible to use the 'hard' 
  relationships to make decisions based on classical logic, the 'soft' relationships 
  may be of use where heuristics are applied.</p>
<h3 align="left">Software Projects</h3>
<p align="left">Although many of the concepts have been lifted from the world 
  of software project management, it should be emphasized that this is only one 
  possible domain of application. It is anticipated that in the context of software 
  project management this vocabulary will primarily be used in the early stages 
  of requirements analysis. </p>
<p align="left">In the context of software requirements specification, 'hard' 
  goals correspond to functional requirements, 'soft' goals correspond to non-functional 
  requirements, aspects such as usability, reliability, interoperability and scalability.</p>
<p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2 align="left">Specification<a name="spec"></a></h2>
<h3 align="left"> Namespace <a name="namespace"></a> </h3>
    
<p align="left"> The XML namespace for this vocabulary is <b>http://purl.org/stuff/project/</b> 
  and the recommended prefix is <b>prj</b>. </p>
    
<p align="left"> In RDF/XML documents the following declaration should be used 
  : </p>
    
<p align="left"> <b>xmlns:prj=&quot;http://purl.org/stuff/project/&quot;</b> </p>
<h3 align="left">Classes<a name="classes"></a> </h3>
    
<h4>Goal<a name="Goal"> </a> </h4>
<p> the state of affairs that a plan is intended to achieve<br>
  (WordNet noun Goal, sense 1.) </p>
<p><i>A goal is a condition or state of affairs in the world that the stakeholders 
  would like to achieve. How the goal is to be achieved is not specified, allowing 
  alternatives to be considered. <br>
  A goal can be either a business goal or a system goal. A business goal express 
  goals regarding the business or state of the business affairs the individual 
  or organisation wishes to achieve. System goal expresses goals the target system 
  should achieve, which, generally, describe the functional requirements of the 
  target information system. </i></p>
<p>&nbsp;</p>
<h4>SoftGoal<a name="softgoal"></a> </h4>
<p><i>A softgoal is a condition or state of affairs in the world that the actor 
  would like to achieve, but unlike in the concept of (hard) goal, there are no 
  clear-cut criteria for whether the condition is achieved, and it is up to subjective 
  judgement and interpretation of the developer to judge whether a particular 
  state of affairs in fact achieves sufficiently the stated softgoal. </i></p>
<p align="left"><i>Each softgoal has a type, such as &quot;minimizing memory utilization&quot;, 
  and a topic, such as &quot;system&quot;. The type qualifies the topic. Together 
  they express a goal that needs to be achieved during the design process (i.e. 
  &quot;minimizing memory utilization in the system&quot;).</i></p>
<p><i>When NFR softgoals are refined to the extend that specific design techniques 
  or options can be identified, these are expressed as &quot;operationalizations&quot; 
  (soft) goals. They are shown as clouds with thick solid borders graphically). 
  Softgoals may have additional impact on each other beyond those established 
  through refinements. These &quot;side effects&quot; are called correlations 
  and are shown as dotted line links. Arguments in support of (or to object to) 
  goals or their contributions are &quot;claims&quot; softgoals and are shown 
  as clouds with dotted line borders. </i></p>
<p>&nbsp;</p>
<h4>GoalList<a name="goallist"></a></h4>
<h4>Module<a name="Module"> </a> </h4>
<p> - a block of work containing Goals and Tasks<br>
  (WordNet noun Module, sense 4.) </p>
<h4> Task<a name="Task"> </a> </h4>
<p> - an activity (=Action) a specific piece of work<br>
  (WordNet noun Task, sense 2.) </p>
<p><i>A task specifies a particular way of doing something. When a task is specified 
  as a sub-component of a (higher-level) task, this restricts the higher-level 
  task to that particular course of action. <br>
  Tasks can also be seen as the solutions in the target system, which will satisfice 
  the softgoals (called operationalizations in NFR). These solutions provide operations, 
  processes, data representations, structuring, constraints and agents in the 
  target system to meet the needs stated in the goals and softgoals. </i></p>
<p><i>The sub-components of a task can be goal, task, resource, and softgoal.</i> 
</p>
<p align="left">&nbsp;</p>
<h4>&nbsp; </h4>
<h4>TaskList<a name="TaskList"> </a> </h4>
<p> (a bag of tasks)<br>
  (WordNet noun list, sense 1.) </p>
<h4>Project<a name="Project"> </a> </h4>
<p> - a specialization of Module to identify a complete unit<br>
  (WordNet noun project, sense 1.) </p>
<h4> Agent<a name="Agent"> </a> </h4>
<p> <i>An actor is an active entity that carries out actions to achieve goals 
  by exercising its know-how. Graphically, an actor may optionally have a boundary, 
  with intentional elements inside. </i><br>
  (WordNet noun agent, sense 6.)<br>
  //entity </p>
<h4>Session<a name="Session"> </a> </h4>
<p> - a (time and/or agent and/or task ) delimited set of actions applied to a 
  module<br>
  (WordNet noun list, sense 3.) </p>
<h4>Environment <a name="environment"></a></h4>
<p>&nbsp;</p>
<h3>Properties<a name="properties"></a></h3>
<p>&nbsp;</p>
<h4 align="left">hasTask<a name="hasTask"></a></h4>
<h4 align="left">subGoal<a name="subGoal"></a></h4>
<h4 align="left">subTask<a name="subTask"></a></h4>
<p align="left">&nbsp;</p>
<h4 align="left">hasReport<a name="hasReport"></a> </h4>
    <p align="left">(extension of isDefinedBy) </p>
    <p align="left">
      branchTag
    </p>
    
<h4 align="left"> </h4>
<h4 align="left"> </h4>
<h4 align="left"> </h4>
<h4 align="left"> </h4>
<h4 align="left"> name<a name="name"></a> </h4>
    <p align="left">
      The name of the Project/Goal
    </p>
    <p align="left">
      sbclass of rdf:label
    </p>
    
<h3>&nbsp; </h3>
    
<h4> goalType<a name="goalType"> </a> </h4>
    (Goal + WordNet noun type, sense 1.)<br>(Product, Component...)

    
<h4> <br>
  version<a name="version"> </a> </h4>
    <p>
      <br>
      (WordNet noun version, sense 2.)
    </p>
    
<h3>&nbsp; </h3>
    
<h4> hasGoal<a name="hasGoal"> </a> </h4>
    
<h4> <br>
  taskType<a name="taskType"> </a> </h4>
    <p>
      (likely objects : Defect, Documentation, Patch, Feature, Enhancement...)
    </p>
    
<h4> <br>
  priority<a name="priority"> </a> </h4>
    
<h4> status<a name="status"> </a> </h4>
    <p>
      (Unassigned, Open, Resolved... - Live/Test?)
    </p>
    
<h4> duration<a name="duration"> </a> </h4>
    
<h4> submittedDate<a name="submittedDate"> </a> </h4>
    
<h4> startDate<a name="startDate"> </a> </h4>
    
<h4> <br>
  targetDate<a name="targetDate"> </a> </h4>
    
<h4> <br>
  finishDate<a name="finishDate"> </a> </h4>
    
<h4> dependsOn<a name="dependsOn"> </a> </h4>
<p><i>A Task Means_Ends Structure connects a task with the means (tasks) to achieve 
  it directly, which is a short hand form of one Task Decomposition Structure 
  and the related Goal Means_Ends Structure. See Figure2 as an example. <br>
  A Resource Means_Ends Structure connects a resource with the means (tasks) to 
  make it available, which is a short hand form of one &lt;softgoal Contribution 
  Structure&gt;.See Figure 3 as an example. </i></p>
<p><i>GRL DECOMPOSITON statement provides the ability to define what other elements 
  need to be achieved or available in order for a task to perform. </i></p>
<p><i>A Task Decomposition Structure shows the essential components of a task, 
  which include subtasks that must be performed, subgoals that must be achieved, 
  resources that must be accessible, and softgoals that must be satisfied. </i></p>
    
<h4> <br>
  isADependencyOf<a name="isADependencyOf"> </a> </h4>
    
<h4> isHelpedBy<a name="isHelpedBy"> </a> </h4>
    
<h4> helps<a name="helps"> </a> </h4>
    
<h4> hasAgent<a name="hasAgent"> </a> </h4>
    
<h4> owns<a name="owner"> </a> </h4>
<h4><br>
  reporter<a name="reporter"> </a> </h4>
<h3>&nbsp; </h3>
    
<h4> agentType<a name="agentType"> </a> </h4>
    <p>
      (Person, software tool...)
    </p>
    
<h4> <br>
  role<a name="role"> </a> </h4>
    
<p> (Developer, Observer, QA...) </p>
<h4 align="left">availability<a name="availability"></a></h4>
<p align="left">&nbsp;</p>
<h4 align="left">isHurtBy<a name="isHurtBy"></a></h4>
<p align="left">&nbsp;</p>
<h4 align="left">hurts<a name="hurts"></a></h4>
<h4 align="left">hasAvailability<a name="availability"></a></h4>
<p>&nbsp;</p>
<p>&nbsp; </p>
<h3>Compatibility Notes<a name="compatibility"></a></h3>
<h4>&nbsp;</h4>
<h4>GRL Ontology</h4>
<p><a href="http://www.cs.toronto.edu/km/GRL/grl_syntax.html">GRL</a> (Goal-oriented 
  Requirement Language) is a language for supporting goal-oriented modelling and 
  reasoning of requirements, especially for dealing with non-functional requirements 
  (NFRs). It is expressed in textual, graphic or XML notations. The mapping between 
  GRL and PRJ takes place at the abstract model level.</p>
<p>There are three main categories of concepts: intentional elements, intentional 
  relationships, and actors. Intentional elements of GRL map onto RDF classes 
  in the PRJ schema, intentional relationships onto properties.</p>
<p><b>Intentional Elements</b></p>
<p><b><i>goal</i></b></p>
<p>maps directly onto <a href="#Goal">prj:Goal</a></p>
<p><b><i>task</i></b></p>
<p>maps directly onto <a href="#Task">prj:Task</a></p>
<p><b><i>softgoal</i></b></p>
<p>maps directly onto <a href="#softgoal">prj:SoftGoal</a></p>
<p><b><i>belief</i></b></p>
<p>use <a href="http://purl.org/ibis#Argument">http://purl.org/ibis#Argument</a></p>
<p><b><i>resource</i></b></p>
<p>use rdf:Resource</p>
<p><b>Intentional Relationships</b></p>
<p>The relationships of the GRL ontology map to properties in the PRJ vocabulary, 
  although PRJ descriptions are less fine-grained than those of GRL. However, 
  in many cases a one-to-one mapping will be achievable by taking into consideration 
  the type of the subject and object of the statement/relationship. </p>
<p><b><i>means-ends </i></b></p>
<p>use <a href="#dependsOn">prj:dependsOn</a></p>
<p><b><i>decomposition </i></b></p>
<p>use <a href="#dependsOn">prj:dependsOn</a></p>
<p><b><i>contribution </i></b></p>
<p>use one or more of <a href="#dependsOn">prj:dependsOn</a>;</p>
<p><a href="#helps">prj:helps</a> / <a href="#isHelpedBy">prj:isHelpedBy</a>;</p>
<p><a href="#hurts">prj:hurts</a> / <a href="#isHurtBy">prj:isHurtBy</a>;</p>
<p><i><b>correlation</b></i></p>
<p>(side effects) as contribution</p>
<p><b><i>dependency</i></b></p>
<p>use <a href="#dependsOn">prj:dependsOn</a> with subject rdf:type <a href="#Agent">prj:Agent</a> 
  and object rdf:type <a href="#Agent">prj:Agent</a></p>
<p><b>Actors</b></p>
<p>map <i>indirectly</i> to <a href="#Agent">prj:Agent</a>; <a href="#agentType">prj:agentType</a>; 
  <a href="#role">prj:role</a>; their possession of intentional elements expressed 
  using <a href="#owner">prj:owns</a></p>
<p>&nbsp;</p>
<h3>RDF Schema<a name="schema"></a></h3>
<p><a href="project.rdfs">RDF Schema</a></p>
<p>&nbsp;</p>
<h2>Associated Vocabularies</h2>
<p>The Project vocabulary described here only aims to provide a core set of terms. 
  It is anticipated that both domain-specific (e.g. for software projects) and 
  more generally applicable vocabularies will be used alongside the Project vocabulary. 
  The following are likely candidates for general use.</p>
<h3>Dublin Core</h3>
<p><i>Some of the terms in PV may map directly to (qualified) DC (elements/terms), 
  and where appropriate equivalence relationships will be expressed in this schema. 
  I'm not yet sure whether subclass/subproperty relationships will be appropriate. 
  With a bit of luck a friendly DC'er might help me out... </i></p>
<h3>Calendaring</h3>
<p><b>@@TODO UPDATE</b> There is significant crossover between this vocabulary 
  and the work being done on calendaring at the W3C. The main schema referred 
  to is <a href="http://ilrt.org/discovery/2001/06/schemas/ical-full/hybrid.rdf"><i>hybrid</i></a> 
  (Michael Arick/Libby Miller), which draws on earlier work such as <a href="http://www.ietf.org/rfc/rfc2445.txt">iCal</a>. 
  Because of its roots this schema is already pretty complex, so I decided to 
  ignore it until I'd got this schema roughed out. A mapping is very desirable 
  for information sharing, but I think it'll be easier to do this at a loosely-coupled 
  equivalence level rather than using <i>hybrid</i> terms directly (or subclassing) 
  for this schema. With a bit of luck a friendly calendarer might help me out...</p>
<h3>IBIS</h3>
<p>...</p>
<h3>W6</h3>
<p>W6 offers an easy way of augmenting the Project vocabulary by relating entities 
  based on simple descriptive relationships : <code>who</code>, <code>what</code>, 
  <code>why</code>, <code>when</code>, <code>where</code> and <code>how</code>. 
</p>
<h2>
      Appendix X
    </h2>
    
<h3> License and Copyright<a name="license"></a> </h3>
    
<p> This documentation and associated RDF Schema will be placed in the public 
  domain under a Creative Commons license, with the usual software liability disclaimers. 
  Reproduction as a whole or in part is permitted without restriction. The author 
  would be grateful if the namespace <a href="#namespacenote">advisory note</a> 
  is taken into consideration for any derivative work.</p>
<p>&nbsp;</p>
<h2> References/Related<a name="refs"></a></h2>
<p><a href="http://usefulinc.com/edd/notes/DOAP">DOAP</a> - Edd Dumbill, description 
  of a (software) project (in RDF) notes (with outher related links)</p>
<p>Project members in <a href="http://usefulinc.com/edd/notes/RDFBlogRoll">RDF 
  blogroll</a></p>
<p><a href="http://maven.apache.org/reference/project-descriptor.html">Maven Project 
  Descriptors</a> </p>
<p><a href="http://www.meta-language.net/%20">MetaL</a> - An XML based Meta-Programming 
  language</p>
<p><a href="http://www.pacificedge.com/xml/xml.asp">Project Management XML Schema</a> 
  (PMXML) <b><i>huge!</i></b></p>
<h3>Project/Issue Management Related Systems</h3>
<p>Bugzilla</p>
<p>Scarab</p>
<p>werkz</p>
<p>Maven</p>
<h2>&nbsp;</h2>
<h2>
      
    </h2>
    <h2>
      
    </h2>
    <h2>
      
    </h2>
    <h2>
      
    </h2>
    
<h2> Changes <a name="changes"></a> </h2>
    
<p><b><i>2004-05-07</i></b> : considerable revision of schema, minor additions 
  to docs</p>
<p>2003-09-30 : added # to namespace</p>
<p>2003-06-12 : added SoftGoal; GoalList; hurts; isHurtBy; hasAvailability. <i><b>owner</b></i> 
  modified to <b><i>owns</i></b>. general tidying up and descriptions added</p>
<p>2003-04-10 : added Environment; hasReport; branchTag; name; logo. </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      2003-02-10 : submittedDate added
    </p>
    <p>
      2003-02-05 : added license note &amp; namespace description
    </p>
    
<p> 2003-01-30 : Initial public draft.</p>
<p></p>
  </body>
</html>
